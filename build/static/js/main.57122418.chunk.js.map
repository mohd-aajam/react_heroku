{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/About.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","to","title","type","id","about","onClick","toggleMode","role","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","length","About","myStyle","defaultProps","Alert","alert","word","lower","charAt","slice","capitalized","msg","App","setMode","setAlert","message","setTimeout","body","exact","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.57122418.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom'\r\n \r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n <div className=\"container-fluid\">\r\n      {/* <a className=\"navbar-brand\" href=\"#\">{props.title}</a> */}\r\n      <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n   <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" \r\n   aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n     <span className=\"navbar-toggler-icon\"></span>\r\n   </button>\r\n   <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n     <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n       <li className=\"nav-item\">\r\n         {/* <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a> */}\r\n         <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n       </li>\r\n       <li className=\"nav-item\">\r\n         {/* <a className=\"nav-link\" href=\"/about\">{props.about} </a> */}\r\n         <Link className=\"nav-link\" to=\"/about\">{props.about} </Link>\r\n       </li>\r\n     </ul>\r\n\r\n        \r\n        <div className=\"form-check form-switch\">\r\n      <input className=\"form-check-input\" type=\"checkbox\" onClick={props.toggleMode} role=\"switch\"/>\r\n      <label className={`form-check-label text-${props.mode==='light'?'dark':'light'}`} htmlFor=\"flexSwitchCheckDefault\">Enable \r\n      {props.mode==='light'?'Dark ':'Light '}Mode</label>\r\n    </div>\r\n   </div>\r\n </div>\r\n</nav>\r\n\r\n    )\r\n}\r\nNavbar.propTypes = {\r\n     title: PropTypes.string.isRequired,\r\n     about: PropTypes.string.isRequired\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: 'set title here',\r\n    about:'about text here'\r\n}","import React,{useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    //for convert to upper case\r\n    const handleUpCLick =() =>{  \r\n    let  newText= text.toUpperCase();\r\n    setText(newText)\r\n    props.showAlert(\"Converted to uppercase\", \"success\");\r\n    }\r\n    //for lower case\r\n    const handleLoCLick =() =>{  \r\n        let  newText= text.toLowerCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to lowercase\", \"success\");\r\n        }\r\n    //for clear text\r\n    const handleClear =() =>{  \r\n        let  newText= \"\";\r\n        setText(newText)\r\n        props.showAlert(\"Cleared text\", \"success\");\r\n        }\r\n    \r\n    //for removing extra spaces\r\n        const handleExtraSpaces=()=>{\r\n            let newText= text.split(/[ ]+/);\r\n            setText(newText.join(\" \"))\r\n            props.showAlert(\"Extra Spaces removed\", \"success\");\r\n        }\r\n\r\n    const handleOnChange =(event) =>{\r\n        setText(event.target.value)\r\n    }  \r\n    \r\n    const handleCopy=() =>{ \r\n        let text=document.getElementById(\"mybox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value); \r\n        props.showAlert(\"Copied to clipboard\", \"success\");\r\n    }\r\n\r\n    const [text, setText]= useState('');\r\n        // text=\"tew text here\" // wrong way to change the state\r\n        // setText(\"tew text here\") // Correct way to change the state \r\n        return (\r\n            <>\r\n            <div className=\"container\" style={{color:props.mode==='dark'?'white':'black'}}>\r\n                <h1>{props.heading}</h1>\r\n                <div className=\"mb-3\">\r\n                <textarea className=\"form-control\"  value={text} onChange={handleOnChange} style={{backgroundColor:props.mode==='dark'?'#212529':'white',color:props.mode==='dark'?'white':'black'}} id=\"mybox\"  rows=\"10\"></textarea>\r\n                </div>\r\n                <button className=\"btn btn-primary mx-2 my-2\" onClick={handleUpCLick}>Convert to Upper Case</button>\r\n                <button className=\"btn btn-primary mx-2 my-2\" onClick={handleLoCLick}>Convert to Lower Case</button>\r\n                <button className=\"btn btn-primary mx-2 my-2\" onClick={handleClear}>Clear Text</button>\r\n                <button className=\"btn btn-primary mx-2 my-2\" onClick={handleCopy}>Copy Text</button>\r\n                <button className=\"btn btn-primary mx-2 my-2\" onClick={handleExtraSpaces}>Remove Extra spaces</button>\r\n            </div>\r\n            <div className=\"container my-3\" style={{color:props.mode==='dark'?'white':'black'}}>\r\n                <h1>Your text summery</h1>\r\n                <p>{ text.split(\" \").length} words are {text.length} characters</p>\r\n                <p>{0.008*text.split(\" \").length}Minutes to read </p>\r\n            </div>\r\n            </>\r\n    )\r\n}\r\n","import React, {useState} from 'react'\r\n\r\nexport default function About() {\r\n  const [myStyle, setMyStyle] = useState( {\r\n    color:'black',\r\n    backgroundColor:'white' \r\n  })\r\n\r\n  const [btntext, setBtnText] = useState(\"Enable Dark mode\")\r\n const toggleStyle=()=>{ \r\n      if(myStyle.color === 'black'){ \r\n        setMyStyle({\r\n          color:'white',\r\n          backgroundColor:'black',\r\n          border:'1px solid black'\r\n        })\r\n        setBtnText(\"Enable Light mode\")\r\n      }\r\n      else{\r\n        setMyStyle({\r\n          color:'black',\r\n          backgroundColor:'white'\r\n        })\r\n        setBtnText(\"Enable Dark mode\")\r\n      } \r\n }\r\n\r\n    return ( \r\n  <div className=\"container\" style={myStyle}>\r\n    <h2 className=\"my-3\">About Us</h2>\r\n         <div className=\"accordion\" id=\"accordionExample\" style={myStyle}>\r\n            <div className=\"accordion-item\">\r\n            <h2 className=\"accordion-header\" id=\"headingOne\">\r\n            <button className=\"accordion-button\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n            Accordion Item # 1\r\n            </button>\r\n        </h2>\r\n        <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n          <div className=\"accordion-body\" style={myStyle}>\r\n            <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"accordion-item\">\r\n        <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n          <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n            Accordion Item #2\r\n          </button>\r\n        </h2>\r\n        <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n          <div className=\"accordion-body\" style={myStyle}>\r\n            <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"accordion-item\">\r\n        <h2 className=\"accordion-header\" id=\"headingThree\">\r\n          <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n            Accordion Item #3\r\n          </button>\r\n        </h2>\r\n        <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n          <div className=\"accordion-body\" style={myStyle}>\r\n            <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n          </div>\r\n        </div>\r\n        </div>\r\n      </div>\r\n         </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalized =(word)=>{\r\n        const lower=word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase()+lower.slice(1);\r\n    }\r\n    return (\r\n   props.alert && <div className=\"row justify-content-center\"><div className={`alert alert-${props.alert.type} col-md-4 text-center  alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{capitalized(props.alert.type)}</strong>: {props.alert.msg} \r\n    </div></div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport About from './components/About';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\nimport {  BrowserRouter as Router,  Routes,  Route} from \"react-router-dom\";\n\nfunction App() {\n    const [mode,setMode]=useState('light');//whether dark mode is enable or not\n    const [alert, setAlert] = useState(null);\n\n    const showAlert=(message, type)=>{\n      setAlert({\n        msg: message,\n        type: type\n      })\n      setTimeout(() => {\n        setAlert(null);\n      }, 2000);\n    }\n  \n    const toggleMode =()=>{\n      if(mode==='light')\n      {\n        setMode('dark');\n        document.body.style.backgroundColor='#0d285e';\n        showAlert(\"Dark mode has been enabled\",\"success\");\n        document.title= 'TextUtils - Dark Mode';\n      }\n      else{\n      setMode('light');\n      document.body.style.backgroundColor='white';\n      showAlert(\"Light mode has been enabled\",\"success\");\n      document.title= 'TextUtils - Light Mode';\n\n      }\n    }\n  return (<>\n  <Router> \n<Navbar title=\"TextUtils\" about=\"about\" mode={mode} toggleMode={toggleMode}/>\n    <Alert alert={alert}/>\n    <div className=\"container my-3\">\n      <Routes>\n        {/* if we not use exact keyword then react will render the 1 st component even we want to render the 2nd component\n       { /users -->component 1\n      /users/about } --> component 2 */}\n\n                <Route exact path=\"/about\" element={<About/>}>\n                </Route>\n                <Route exact path=\"/\" element={<TextForm showAlert={showAlert} heading=\"Enter your text to analyze below\" mode={mode}/>}>\n                </Route>\n        </Routes>\n    </div>\n    </Router>\n</>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}